[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\dainisa\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\dainisa\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_121)
[debug]       Load.loadUnit: plugins took 119.4084ms
[debug]       Load.loadUnit: defsScala took 0.3337ms
[debug] [Loading] Scanning directory C:\Users\dainisa\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\dainisa\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.6991 ms
[debug]           Load.resolveProject(global-plugins) took 60.9069ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\dainisa\.sbt\1.0\plugins, plugins: List(<none>))) took 111.7284ms
[debug] [Loading] Done in C:\Users\dainisa\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 131.2919ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2842ms
[debug]     Load.loadUnit(file:/C:/Users/dainisa/.sbt/1.0/plugins/, ...) took 258.7816ms
[debug]   Load.apply: load took 403.5926ms
[debug]   Load.apply: resolveProjects took 5.5512ms
[debug]   Load.apply: finalTransforms took 57.8553ms
[debug]   Load.apply: config.delegates took 10.2985ms
[debug]   Load.apply: Def.make(settings)... took 364.5471ms
[debug]   Load.apply: structureIndex took 92.0422ms
[debug]   Load.apply: mkStreams took 2.1069ms
[info] loading global plugins from C:\Users\dainisa\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5253.7586ms
[debug]           Load.loadUnit: plugins took 26.4118ms
[debug]           Load.loadUnit: defsScala took 0.006ms
[debug] [Loading] Scanning directory C:\data\PRIVATE\hello-world\project
[debug]             Load.loadUnit: mkEval took 10.8686ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\data\PRIVATE\hello-world\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.614 ms
[info] loading settings for project hello-world-build from idea.sbt ...
[debug]               Load.resolveProject(hello-world-build) took 9.1345ms
[debug]             Load.loadTransitive: finalizeProject(Project(id hello-world-build, base: C:\data\PRIVATE\hello-world\project, plugins: List(<none>))) took 11.6125ms
[debug] [Loading] Done in C:\data\PRIVATE\hello-world\project, returning: (hello-world-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2945.6654ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.7203ms
[debug]         Load.loadUnit(file:/C:/data/PRIVATE/hello-world/project/, ...) took 2977.7109ms
[debug]       Load.apply: load took 2978.8568ms
[debug]       Load.apply: resolveProjects took 0.0834ms
[debug]       Load.apply: finalTransforms took 10.4714ms
[debug]       Load.apply: config.delegates took 0.393ms
[debug]       Load.apply: Def.make(settings)... took 85.8862ms
[debug]       Load.apply: structureIndex took 22.715ms
[debug]       Load.apply: mkStreams took 0.0033ms
[info] loading project definition from C:\data\PRIVATE\hello-world\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4283.2976ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\data\PRIVATE\hello-world
[debug]       Load.loadUnit: mkEval took 0.2437ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\data\PRIVATE\hello-world, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6954 ms
[info] loading settings for project hello-world from build.sbt ...
[debug]         Load.resolveProject(hello-world) took 29.7323ms
[debug]       Load.loadTransitive: finalizeProject(Project(id hello-world, base: C:\data\PRIVATE\hello-world, plugins: List(<none>))) took 32.6557ms
[debug] [Loading] Done in C:\data\PRIVATE\hello-world, returning: (hello-world)
[debug]     Load.loadUnit: loadedProjectsRaw took 1167.553ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.6462ms
[debug]   Load.loadUnit(file:/C:/data/PRIVATE/hello-world/, ...) took 5463.1996ms
[debug] Load.apply: load took 5464.7844ms
[debug] Load.apply: resolveProjects took 0.1113ms
[debug] Load.apply: finalTransforms took 32.6787ms
[debug] Load.apply: config.delegates took 0.3189ms
[debug] Load.apply: Def.make(settings)... took 73.2898ms
[debug] Load.apply: structureIndex took 21.348ms
[debug] Load.apply: mkStreams took 0.0029ms
[info] set current project to hello-world (in build file:/C:/data/PRIVATE/hello-world/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64706 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64706, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to hello-world (in build file:/C:/data/PRIVATE/hello-world/)
[debug] > Exec(idea-shell, None, None)
